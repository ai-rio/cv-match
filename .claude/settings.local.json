{
  "permissions": {
    "allow": [
      "Bash(SUPABASE_URL=test SUPABASE_SERVICE_KEY=test uv run python -m pytest tests/unit/test_input_sanitizer.py::TestInputSanitizer::test_system_prompt_injection -v)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(docker system prune:*)",
      "Bash(wsl bash:*)",
      "Read(//home/carlos/projects/cv-match/backend/app/services/**)",
      "Read(//home/carlos/projects/cv-match/**)",
      "Bash(docker-compose restart:*)",
      "Bash(docker-compose logs:*)",
      "Bash(docker compose:*)",
      "Bash(docker compose logs:*)",
      "mcp__serena__list_memories",
      "mcp__serena__read_memory",
      "Bash(python -m pytest:*)",
      "Bash(uv run python -m pytest:*)",
      "Bash(sudo:*)",
      "Bash(rm:*)",
      "Bash(make:*)",
      "Bash(uv pip install:*)",
      "Bash(uv venv:*)",
      "Bash(python3:*)",
      "mcp__serena__write_memory",
      "mcp__serena__delete_memory",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(pkill:*)",
      "Bash(git add:*)",
      "Bash(git tag:*)",
      "Bash(git push:*)",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__list_dir",
      "mcp__chrome-devtools__list_pages",
      "mcp__chrome-devtools__navigate_page",
      "mcp__chrome-devtools__take_snapshot",
      "mcp__chrome-devtools__take_screenshot",
      "Bash(bun add:*)",
      "Bash(mkdir:*)",
      "Bash(bun pm ls:*)",
      "Bash(cat:*)",
      "Bash(bun run:*)",
      "Bash(tree:*)",
      "Bash(COMPOSE_HTTP_TIMEOUT=120 docker-compose:*)",
      "Bash(bun install:*)",
      "Bash(COMPOSE_HTTP_TIMEOUT=180 docker-compose:*)",
      "Bash(curl:*)",
      "mcp__chrome-devtools__click",
      "mcp__chrome-devtools__list_console_messages",
      "mcp__chrome-devtools__fill",
      "Bash(supabase:*)",
      "mcp__chrome-devtools__wait_for",
      "Bash(bun dev:*)",
      "Bash(python:*)",
      "Read(//home/carlos/**)",
      "Bash(PORT=3002 bun:*)",
      "Bash(bunx:*)",
      "Bash(chmod:*)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_evaluate",
      "mcp__puppeteer__puppeteer_fill",
      "mcp__puppeteer__puppeteer_click",
      "Bash(cp:*)",
      "Bash(git commit:*)",
      "Bash(pre-commit run:*)",
      "Bash(ruff check:*)",
      "Bash(source:*)",
      "Bash(.venv/bin/python:*)",
      "Bash(.venv/bin/python3:*)",
      "Bash(psql:*)",
      "Bash(uv python:*)",
      "Bash(uv tree:*)",
      "Bash(uv sync:*)",
      "Bash(uv run:*)",
      "Bash(pip3 install:*)",
      "mcp__serena__think_about_whether_you_are_done",
      "Bash(bun eslint:*)",
      "Bash(npx tsc:*)",
      "Bash(npx eslint:*)",
      "Bash(./node_modules/.bin/tsc:*)",
      "Bash(./node_modules/.bin/eslint .)",
      "Bash(npm install:*)",
      "Bash(tsc:*)",
      "Bash(npx typescript:*)",
      "Bash(node:*)",
      "Bash(git rm:*)",
      "Bash(mv:*)",
      "mcp__chrome-devtools__new_page",
      "Bash(find:*)"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/home/carlos/projects/Resume-Matcher"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "if git rev-parse --git-dir >/dev/null 2>&1 && [[ -n \"$CLAUDE_TOOL_FILE_PATH\" ]]; then git add \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null; CHANGED_LINES=$(git diff --cached --numstat \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null | awk '{print $1+$2}'); if [[ $CHANGED_LINES -gt 0 ]]; then FILENAME=$(basename \"$CLAUDE_TOOL_FILE_PATH\"); if [[ $CHANGED_LINES -lt 10 ]]; then SIZE=\"minor\"; elif [[ $CHANGED_LINES -lt 50 ]]; then SIZE=\"moderate\"; else SIZE=\"major\"; fi; MSG=\"Update $FILENAME: $SIZE changes ($CHANGED_LINES lines)\"; git commit -m \"$MSG\" \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; fi; fi"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "if git rev-parse --git-dir >/dev/null 2>&1 && [[ -n \"$CLAUDE_TOOL_FILE_PATH\" ]]; then git add \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null; FILENAME=$(basename \"$CLAUDE_TOOL_FILE_PATH\"); git commit -m \"Add new file: $FILENAME\" \"$CLAUDE_TOOL_FILE_PATH\" 2>/dev/null || true; fi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "bash -c 'input=$(cat); FILE_PATH=$(echo \"$input\" | jq -r \".tool_input.file_path // empty\"); SUCCESS=$(echo \"$input\" | jq -r \".tool_response.success // false\"); if [ \"$SUCCESS\" = \"true\" ] && [[ \"$FILE_PATH\" =~ \\.(js|jsx|ts|tsx)$ ]] && [[ ! \"$FILE_PATH\" =~ node_modules ]]; then echo \"üîç Next.js Code Quality Enforcer: Reviewing $FILE_PATH...\"; ISSUES=0; if [ -f \"$FILE_PATH\" ]; then if [[ \"$FILE_PATH\" =~ app/.* ]]; then echo \"üìÅ App Router file detected: $FILE_PATH\"; if [[ \"$FILE_PATH\" =~ page\\.(js|jsx|ts|tsx)$ ]] && ! grep -q \"export default function\" \"$FILE_PATH\" 2>/dev/null && ! grep -q \"export default async function\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ùå Page component must export default function\" >&2; ((ISSUES++)); fi; if [[ \"$FILE_PATH\" =~ layout\\.(js|jsx|ts|tsx)$ ]] && ! grep -q \"children\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ùå Layout component should accept children prop\" >&2; ((ISSUES++)); fi; if [[ \"$FILE_PATH\" =~ page\\.(js|jsx|ts|tsx)$ ]] && ! grep -q \"Metadata\" \"$FILE_PATH\" 2>/dev/null && ! grep -q \"metadata\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ö†Ô∏è Consider adding metadata export for SEO\"; fi; if grep -q \"use client\" \"$FILE_PATH\" 2>/dev/null; then echo \"üñ•Ô∏è Client Component detected\"; if ! grep -E \"(useState|useEffect|onClick|onChange|onSubmit)\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ö†Ô∏è Client component without interactivity - consider Server Component\"; fi; else echo \"üöÄ Server Component (default)\"; if grep -E \"(useState|useEffect|onClick|onChange|onSubmit)\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ùå Interactive features in Server Component - add \\\"use client\\\" directive\" >&2; ((ISSUES++)); fi; fi; fi; if [[ \"$FILE_PATH\" =~ \\.(jsx|tsx)$ ]]; then if ! grep -q \"import.*React\" \"$FILE_PATH\" 2>/dev/null && grep -q \"<\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ö†Ô∏è JSX without React import (Next.js 17+ handles this automatically)\"; fi; if ! grep -q \"FC\\|FunctionComponent\" \"$FILE_PATH\" 2>/dev/null && grep -q \"props\" \"$FILE_PATH\" 2>/dev/null && [[ \"$FILE_PATH\" =~ \\.tsx$ ]]; then echo \"üí° Consider using React.FC or explicit prop types for TypeScript\"; fi; fi; if [[ \"$FILE_PATH\" =~ \\.js$ ]] && [ -f \"tsconfig.json\" ]; then echo \"üìù JavaScript file in TypeScript project: $FILE_PATH\"; echo \"üí° Consider migrating to TypeScript for better type safety\"; fi; if grep -q \"next/image\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚úÖ Using next/image for optimized images\"; elif grep -q \"<img\" \"$FILE_PATH\" 2>/dev/null; then echo \"üñºÔ∏è Regular <img> tag detected\"; echo \"üí° Consider using next/image for better performance\"; fi; if grep -q \"next/link\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚úÖ Using next/link for navigation\"; elif grep -q \"<a href=\" \"$FILE_PATH\" 2>/dev/null && ! grep -q \"http\" \"$FILE_PATH\" 2>/dev/null; then echo \"üîó Regular <a> tag for internal links detected\"; echo \"üí° Use next/link for internal navigation\"; fi; if grep -q \"getServerSideProps\\|getStaticProps\" \"$FILE_PATH\" 2>/dev/null; then echo \"‚ö†Ô∏è Pages Router data fetching methods detected\"; echo \"üí° Consider migrating to App Router with Server Components\"; fi; if grep -q \"className=.*{\" \"$FILE_PATH\" 2>/dev/null; then echo \"üé® Dynamic className detected\"; if ! grep -q \"clsx\\|classnames\\|cn(\" \"$FILE_PATH\" 2>/dev/null; then echo \"üí° Consider using clsx or similar utility for className concatenation\"; fi; fi; if [ $ISSUES -eq 0 ]; then echo \"‚úÖ Code quality check passed for $FILE_PATH\"; else echo \"‚ùå Found $ISSUES code quality issues in $FILE_PATH\" >&2; exit 2; fi; else echo \"‚ùå File $FILE_PATH not found\"; fi; else echo \"‚ÑπÔ∏è Code quality check skipped (not a JavaScript/TypeScript file or failed operation)\"; fi'",
            "timeout": 20
          }
        ]
      },
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Tool: $CLAUDE_TOOL_NAME completed\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Tool: $CLAUDE_TOOL_NAME completed\"; fi"
          }
        ]
      },
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "if command -v osascript >/dev/null 2>&1; then osascript -e 'display notification \"Tool: $CLAUDE_TOOL_NAME completed\" with title \"Claude Code\"'; elif command -v notify-send >/dev/null 2>&1; then notify-send 'Claude Code' \"Tool: $CLAUDE_TOOL_NAME completed\"; fi"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "python3 \"$CLAUDE_PROJECT_DIR\"/.claude/hooks/validate-branch-name.py"
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "python3 .claude/scripts/context-monitor.py"
  }
}
