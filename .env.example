# =============================================================================
# CV-MATCH ENVIRONMENT VARIABLES EXAMPLE
# =============================================================================
# This file contains all environment variables used by the CV-Match application.
# Copy this file to .env and fill in your actual values.
#
# SECURITY NOTES:
# - Never commit this file with real values to version control
# - Keep your .env file secure and never share it
# - Use different keys for development and production environments
# - Regularly rotate your API keys and secrets
# =============================================================================

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application environment
# Required: Yes
# Description: Sets the application environment (development, staging, production)
# Example values: development, staging, production
ENVIRONMENT=development

# Node.js environment
# Required: Yes
# Description: Sets the Node.js environment mode
# Example values: development, production
NODE_ENV=development

# =============================================================================
# FRONTEND (NEXT.JS) CONFIGURATION
# =============================================================================

# Next.js Public API URL
# Required: Yes
# Description: The base URL for the backend API that the frontend will communicate with
# Example values: http://localhost:8000 (development), https://api.yourdomain.com (production)
NEXT_PUBLIC_API_URL=http://localhost:8000

# Next.js Public Supabase URL
# Required: Yes
# Description: The URL of your Supabase project for frontend use
# Example values: http://127.0.0.1:54321 (local), https://your-project.supabase.co (remote)
NEXT_PUBLIC_SUPABASE_URL=http://127.0.0.1:54321

# Next.js Public Supabase Anonymous Key
# Required: Yes
# Description: The anonymous/public key for Supabase used in the frontend
# Security: This key is meant to be public and used in client-side code
# Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key

# Stripe Publishable Key (Frontend)
# Required: No (only needed for payment features)
# Description: The publishable Stripe key for frontend payment processing
# Security: This key is safe to use in frontend code
# Example values: pk_test_... (test), pk_live_... (production)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key

# Default Currency for Payments
# Required: No (defaults to USD if not set)
# Description: The default currency for payment processing
# Example values: brl, usd, eur
NEXT_PUBLIC_DEFAULT_CURRENCY=brl

# Default Country for Payments
# Required: No (defaults to US if not set)
# Description: The default country code for payment processing
# Example values: BR, US, UK
NEXT_PUBLIC_DEFAULT_COUNTRY=BR

# Default Locale
# Required: No (defaults to en if not set)
# Description: The default locale for internationalization
# Example values: pt-br, en-us
NEXT_PUBLIC_DEFAULT_LOCALE=pt-br

# Supported Locales
# Required: No (defaults to en if not set)
# Description: Comma-separated list of supported locales
# Example values: en,pt-br,es,fr
NEXT_PUBLIC_SUPPORTED_LOCALES=en,pt-br

# Target Market
# Required: No
# Description: The target market for business logic
# Example values: brasil, usa, global
NEXT_PUBLIC_MARKET=brasil

# =============================================================================
# BACKEND (FASTAPI) CONFIGURATION
# =============================================================================

# Supabase URL (Backend)
# Required: Yes
# Description: The URL of your Supabase project for backend use
# Example values: http://127.0.0.1:54321 (local), https://your-project.supabase.co (remote)
SUPABASE_URL=http://127.0.0.1:54321

# Supabase Service Key
# Required: Yes
# Description: The service/secret key for Supabase used in the backend with elevated privileges
# Security: Keep this key secret! Never expose it in frontend code
# Example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
SUPABASE_SERVICE_KEY=your-supabase-service-key

# Supabase Database URL
# Required: No (optional for direct database connections)
# Description: Direct connection string to the PostgreSQL database
# Security: Keep this URL secret! It contains database credentials
# Example: postgresql://postgres:postgres@127.0.0.1:54322/postgres
SUPABASE_DB_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres

# =============================================================================
# LLM SERVICES CONFIGURATION
# =============================================================================

# OpenAI API Key
# Required: No (only needed for OpenAI LLM features)
# Description: API key for OpenAI services (GPT models)
# Security: Keep this key secret! Never expose it in frontend code
# Get from: https://platform.openai.com/api-keys
# Example: sk-...
OPENAI_API_KEY=your-openai-api-key

# Anthropic API Key
# Required: No (only needed for Anthropic Claude features)
# Description: API key for Anthropic Claude services
# Security: Keep this key secret! Never expose it in frontend code
# Get from: https://console.anthropic.com/
# Example: sk-ant-...
ANTHROPIC_API_KEY=your-anthropic-api-key

# =============================================================================
# LLM SECURITY CONFIGURATION
# =============================================================================

# Input Sanitization Settings
# Required: No (uses defaults if not set)
# Description: Configure input validation and sanitization for LLM prompts

# Maximum prompt length (characters)
MAX_PROMPT_LENGTH=10000

# Maximum text length for embeddings (characters)
MAX_TEXT_LENGTH=50000

# Maximum query length for searches (characters)
MAX_QUERY_LENGTH=1000

# Content filtering options
ALLOW_HTML_TAGS=false
ALLOW_MARKDOWN=true
ALLOW_URLS=true

# Injection pattern blocking
BLOCK_SYSTEM_PROMPTS=true
BLOCK_ROLE_INSTRUCTIONS=true
BLOCK_JSON_INSTRUCTIONS=true
BLOCK_CODE_EXECUTION=true

# Rate limiting (requests per minute)
RATE_LIMIT_PER_USER=60
RATE_LIMIT_PER_IP=100
ENABLE_RATE_LIMITING=true

# Security monitoring
ENABLE_SECURITY_LOGGING=true
LOG_SECURITY_EVENTS=true
SECURITY_LOG_LEVEL=INFO

# =============================================================================
# VECTOR DATABASE CONFIGURATION
# =============================================================================

# Qdrant Vector Database URL
# Required: No (only needed for vector search features)
# Description: URL for the Qdrant vector database service
# Example values: http://localhost:6333 (local), https://your-cluster.qdrant.io (cloud)
QDRANT_URL=https://your-qdrant-cluster.qdrant.io

# Qdrant API Key
# Required: No (only needed if Qdrant requires authentication)
# Description: API key for Qdrant vector database
# Security: Keep this key secret!
# Get from: Your Qdrant cloud console
QDRANT_API_KEY=your-qdrant-api-key

# Qdrant Collection Name
# Required: No (defaults to 'default_collection' if not set)
# Description: The name of the collection to use for storing vectors
# Example values: resumes, job_descriptions, default_collection
QDRANT_COLLECTION_NAME=your_collection_name

# =============================================================================
# PAYMENT PROCESSING (STRIPE) CONFIGURATION
# =============================================================================

# Stripe Secret Key
# Required: No (only needed for payment features)
# Description: The secret Stripe key for backend payment processing
# Security: Keep this key secret! Never expose it in frontend code
# Example values: sk_test_... (test), sk_live_... (production)
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key

# Stripe Webhook Secret
# Required: No (only needed for payment webhooks)
# Description: Secret for verifying Stripe webhook events
# Security: Keep this key secret!
# Get from: Stripe Dashboard -> Webhooks -> Select endpoint -> Signing secret
# Example: whsec_...
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS Origins
# Required: No (defaults to http://localhost:3000 if not set)
# Description: Comma-separated list of allowed origins for Cross-Origin Resource Sharing
# Example values: http://localhost:3000,https://yourdomain.com,https://app.yourdomain.com
CORS_ORIGINS=http://localhost:3000,http://frontend:3000,http://127.0.0.1:3000

# =============================================================================
# EMAIL CONFIGURATION (SUPABASE)
# =============================================================================

# SendGrid API Key (Optional)
# Required: No (only needed for production email sending)
# Description: API key for SendGrid email service (used by Supabase Auth)
# Security: Keep this key secret!
# Get from: https://app.sendgrid.com/settings/api_keys
# Note: This is used in Supabase config.toml, not directly in the app
# SENDGRID_API_KEY=your-sendgrid-api-key

# SMTP Configuration (Optional)
# Required: No (only needed for custom SMTP setup)
# Description: SMTP settings for production email sending
# Note: These are used in Supabase config.toml for custom email setup
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USER=apikey
# SMTP_PASS=your-sendgrid-api-key
# ADMIN_EMAIL=admin@yourdomain.com
# SENDER_NAME=Your App Name

# =============================================================================
# DEVELOPMENT & TESTING
# =============================================================================

# Test Database URL (Optional)
# Required: No (only needed for testing)
# Description: Separate database URL for testing environments
# Example: sqlite+aiosqlite:///./test.db
TEST_DATABASE_URL=sqlite+aiosqlite:///./test.db

# Debug Mode (Optional)
# Required: No
# Description: Enable debug mode for detailed logging
# Example values: true, false
# DEBUG=false

# Log Level (Optional)
# Required: No
# Description: Set the logging level for the application
# Example values: DEBUG, INFO, WARNING, ERROR, CRITICAL
# LOG_LEVEL=INFO

# =============================================================================
# SUPABASE AUTH PROVIDER CONFIGURATION
# =============================================================================
# Note: These are typically configured in Supabase Dashboard, but can be set via environment

# Google OAuth Secret (Optional)
# Required: No (configured in Supabase Dashboard)
# Description: OAuth client secret for Google authentication
# Security: Keep this secret!
# Get from: Google Cloud Console -> Credentials -> OAuth 2.0 Client IDs
# SUPABASE_AUTH_EXTERNAL_GOOGLE_SECRET=your-google-oauth-secret

# LinkedIn OAuth Secret (Optional)
# Required: No (configured in Supabase Dashboard)
# Description: OAuth client secret for LinkedIn authentication
# Security: Keep this secret!
# Get from: LinkedIn Developer Portal -> Auth -> Apps
# SUPABASE_AUTH_EXTERNAL_LINKEDIN_SECRET=your-linkedin-oauth-secret

# =============================================================================
# MONITORING & ANALYTICS (Optional)
# =============================================================================

# Sentry DSN (Optional)
# Required: No (only needed for error tracking)
# Description: Sentry Data Source Name for error monitoring
# Security: Keep this DSN secret, though it's less sensitive than API keys
# Example: https://your-sentry-dsn@sentry.io/project-id
# SENTRY_DSN=your-sentry-dsn

# Google Analytics ID (Optional)
# Required: No (only needed for analytics)
# Description: Google Analytics measurement ID
# Security: This is a public ID and safe to expose
# Example: G-XXXXXXXXXX
# NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX

# =============================================================================
# SECURITY & AUTHENTICATION
# =============================================================================

# JWT Secret (Optional - for custom JWT implementation)
# Required: No (Supabase handles JWT by default)
# Description: Secret key for signing JWT tokens (if implementing custom auth)
# Security: Keep this secret! Use a strong, random string
# JWT_SECRET=your-super-secret-jwt-key-at-least-32-characters-long

# Session Secret (Optional)
# Required: No
# Description: Secret for session management
# Security: Keep this secret!
# SESSION_SECRET=your-session-secret-key

# =============================================================================
# DOCKER & DEPLOYMENT
# =============================================================================

# Docker Environment Variables
# Note: These are typically set in docker-compose.yml or during deployment
# but can be overridden here if needed

# Database Host (Optional)
# Required: No
# Description: Database host for containerized deployments
# DB_HOST=database

# Database Port (Optional)
# Required: No
# Description: Database port for containerized deployments
# DB_PORT=5432

# Redis URL (Optional)
# Required: No (only needed if using Redis for caching)
# Description: Redis connection URL for caching and session storage
# Example: redis://localhost:6379
# REDIS_URL=redis://localhost:6379

# =============================================================================
# INSTRUCTIONS
# =============================================================================
#
# 1. SETUP:
#    - Copy this file to .env: cp .env.example .env
#    - Fill in all required variables with your actual values
#    - Never commit the .env file to version control
#
# 2. LOCAL DEVELOPMENT:
#    - Use local Supabase: http://127.0.0.1:54321
#    - Use test API keys for payment processing
#    - Keep all secrets secure and never share them
#
# 3. PRODUCTION DEPLOYMENT:
#    - Use production Supabase URL and keys
#    - Use production Stripe keys (sk_live_ and pk_live_)
#    - Set ENVIRONMENT=production
#    - Configure proper CORS origins for your domain
#    - Set up proper email service (SendGrid or custom SMTP)
#    - Review and adjust LLM security settings for production use
#
# 4. SECURITY BEST PRACTICES:
#    - Regularly rotate all API keys and secrets
#    - Use different keys for development and production
#    - Limit API key permissions to minimum required
#    - Monitor for unusual API usage
#    - Keep this file up to date with any new environment variables
#    - Review LLM security logs regularly for attack patterns
#
# 5. LLM SECURITY CONFIGURATION:
#    - Adjust MAX_PROMPT_LENGTH based on your use case and cost constraints
#    - Set appropriate RATE_LIMIT values to prevent abuse
#    - Keep ENABLE_SECURITY_LOGGING=true for monitoring
#    - Review BLOCK_* settings based on your application requirements
#
# 6. TESTING:
#    - Create a separate .env.test file for testing configurations
#    - Use test database and test API keys
#    - Never use production credentials in testing
#    - Test security features with various attack patterns
#
# =============================================================================
# Last Updated: 2025-10-07
# Project: CV-Match
# For questions or issues, check the project documentation or create an issue.
# =============================================================================