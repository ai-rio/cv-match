---
description: Full Stack Vibe Coding Template - Project Overview and Standards
globs: ["**/*"]
alwaysApply: true
---

# Vibe Coding Template - Project Standards

This is a modern, modular full-stack application starter template with Next.js frontend and Python FastAPI backend, integrated with Supabase.

## Architecture Overview

- **Backend**: Python FastAPI with Supabase integration (auth, database, storage)
- **Frontend**: Next.js with Tailwind CSS and TypeScript
- **Database**: Supabase PostgreSQL with migrations
- **Vector DB**: Qdrant for semantic search
- **LLM Integration**: OpenAI and Anthropic support

## Core Principles

1. **Type Safety First**: Use TypeScript for frontend, Pydantic models for backend
2. **Service Layer Pattern**: Abstract external services (Supabase, LLM, Vector DB)
3. **Environment-based Configuration**: Use .env files for all configuration
4. **Docker-first Development**: All services containerized
5. **Migration-driven Database**: All schema changes through Supabase migrations

## File Organization Standards

- Keep related functionality grouped in service directories
- Use consistent naming: snake_case for Python, camelCase for TypeScript
- Place shared types and models in dedicated directories
- Maintain clear separation between API routes and business logic

## Development Workflow

- Use `make dev` to start all services
- Create database migrations with `make db-migration-new name=description`
- Apply migrations with `make db-apply`
- Follow the established patterns for new features

## Code Quality Standards

- Always include proper error handling
- Use async/await patterns consistently
- Include type annotations for all functions
- Write descriptive commit messages
- Test API endpoints before committing

When adding new features, follow the established patterns and maintain consistency with existing code structure.