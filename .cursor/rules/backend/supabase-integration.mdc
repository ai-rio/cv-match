---
description: Supabase Integration Patterns and Best Practices
globs: ["backend/app/services/supabase/**/*.py", "backend/app/api/endpoints/**/*.py"]
alwaysApply: false
---

# Supabase Integration Standards

## Database Service Usage

Use the generic `SupabaseDatabaseService` for all database operations:

```python
from app.services.supabase.database import SupabaseDatabaseService
from app.models.your_model import YourModel

# Initialize service
service = SupabaseDatabaseService("table_name", YourModel)

# CRUD operations
items = await service.list(filters={"status": "active"})
item = await service.get("item_id")
new_item = await service.create({"name": "New Item"})
updated_item = await service.update("item_id", {"name": "Updated"})
success = await service.delete("item_id")
```

## Authentication Service

Use the centralized auth service for user management:

```python
from app.services.supabase.auth import SupabaseAuthService

auth_service = SupabaseAuthService()

# Get user from token
user = await auth_service.get_user_from_token(token)

# Exchange provider token
result = await auth_service.exchange_provider_token("google", provider_token)
```

## Storage Service

Use the storage service for file operations:

```python
from app.services.supabase.storage import SupabaseStorageService

storage_service = SupabaseStorageService("bucket_name")

# Upload file
public_url = await storage_service.upload_file(file, "path/to/file")

# Get public URL
url = storage_service.get_public_url("path/to/file")

# Delete file
success = storage_service.delete_file("path/to/file")
```

## Error Handling

Handle Supabase-specific errors appropriately:

```python
try:
    result = await service.create(data)
except Exception as e:
    if "duplicate key" in str(e).lower():
        raise HTTPException(status_code=409, detail="Resource already exists")
    elif "not found" in str(e).lower():
        raise HTTPException(status_code=404, detail="Resource not found")
    else:
        raise HTTPException(status_code=500, detail="Database operation failed")
```

## Row Level Security (RLS)

When creating new tables, always consider RLS policies:

```sql
-- Enable RLS
ALTER TABLE public.your_table ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can read own data"
  ON public.your_table
  FOR SELECT
  USING (auth.uid() = user_id);
```

## Migration Best Practices

- Always test migrations on a staging environment first
- Use descriptive migration names: `make db-migration-new name=add_user_preferences_table`
- Include both up and down migration logic when possible
- Add proper indexes for performance
- Set up appropriate RLS policies for security
