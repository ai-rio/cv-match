---
description: Template for creating new FastAPI endpoints
globs: []
alwaysApply: false
---

# FastAPI Endpoint Template

Use this template when creating new API endpoints:

```python
from fastapi import APIRouter, Depends, HTTPException, status
from typing import List, Optional
from pydantic import BaseModel

from app.models.auth import User
from app.services.supabase.auth import get_current_user
from app.services.supabase.database import SupabaseDatabaseService

router = APIRouter()

# Request/Response Models
class CreateItemRequest(BaseModel):
    name: str
    description: Optional[str] = None
    category: str

class UpdateItemRequest(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    category: Optional[str] = None

class ItemResponse(BaseModel):
    id: str
    name: str
    description: Optional[str]
    category: str
    user_id: str
    created_at: str
    updated_at: str

# Service initialization
item_service = SupabaseDatabaseService("items", ItemResponse)

@router.get("/items", response_model=List[ItemResponse])
async def list_items(
    category: Optional[str] = None,
    current_user: User = Depends(get_current_user)
) -> List[ItemResponse]:
    """List items with optional filtering."""
    try:
        filters = {"user_id": current_user.id}
        if category:
            filters["category"] = category

        items = await item_service.list(filters=filters)
        return items
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve items: {str(e)}"
        )

@router.get("/items/{item_id}", response_model=ItemResponse)
async def get_item(
    item_id: str,
    current_user: User = Depends(get_current_user)
) -> ItemResponse:
    """Get a specific item by ID."""
    try:
        item = await item_service.get(item_id)
        if not item:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Item not found"
            )

        # Ensure user owns the item
        if item.user_id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied"
            )

        return item
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve item: {str(e)}"
        )

@router.post("/items", response_model=ItemResponse, status_code=status.HTTP_201_CREATED)
async def create_item(
    request: CreateItemRequest,
    current_user: User = Depends(get_current_user)
) -> ItemResponse:
    """Create a new item."""
    try:
        item_data = {
            **request.dict(),
            "user_id": current_user.id
        }

        item = await item_service.create(item_data)
        return item
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to create item: {str(e)}"
        )

@router.put("/items/{item_id}", response_model=ItemResponse)
async def update_item(
    item_id: str,
    request: UpdateItemRequest,
    current_user: User = Depends(get_current_user)
) -> ItemResponse:
    """Update an existing item."""
    try:
        # Check if item exists and user owns it
        existing_item = await item_service.get(item_id)
        if not existing_item:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Item not found"
            )

        if existing_item.user_id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied"
            )

        # Update only provided fields
        update_data = {k: v for k, v in request.dict().items() if v is not None}

        if not update_data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No fields to update"
            )

        updated_item = await item_service.update(item_id, update_data)
        return updated_item
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to update item: {str(e)}"
        )

@router.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_item(
    item_id: str,
    current_user: User = Depends(get_current_user)
):
    """Delete an item."""
    try:
        # Check if item exists and user owns it
        existing_item = await item_service.get(item_id)
        if not existing_item:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Item not found"
            )

        if existing_item.user_id != current_user.id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Access denied"
            )

        success = await item_service.delete(item_id)
        if not success:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="Failed to delete item"
            )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to delete item: {str(e)}"
        )
```

## Key Template Elements

1. **Proper imports** with all necessary dependencies
2. **Request/Response models** with Pydantic validation
3. **Authentication** using the `get_current_user` dependency
4. **Service layer** usage with `SupabaseDatabaseService`
5. **Error handling** with appropriate HTTP status codes
6. **Authorization checks** to ensure users can only access their own data
7. **Comprehensive CRUD operations** (Create, Read, Update, Delete)
8. **Input validation** and sanitization
9. **Consistent response formats**
10. **Proper HTTP status codes** for different scenarios
